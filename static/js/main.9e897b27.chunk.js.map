{"version":3,"sources":["components/Header.jsx","contexts/AppReducer.js","contexts/GlobalContext.js","contexts/actions.js","components/Balance.jsx","components/IncomeExpenses.jsx","components/Transaction.jsx","components/TransactionsList.jsx","components/AddTransaction.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","style","textAlign","textTransform","state","action","type","payload","transactions","filter","transaction","id","INITIAL_STATE","balance","income","expense","removeTransaction","addTransaction","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","useEffect","newBalance","reduce","total","amount","toFixed","newExpense","newIncome","Provider","value","RemoveTransaction","AddTransaction","Balance","useContext","sign","className","Math","abs","IncomeExpenses","Transaction","text","onClick","TransactionsList","map","key","useState","inputs","setInputs","handleChange","e","target","name","onSubmit","preventDefault","newTransaction","round","Date","valueOf","random","parseFloat","htmlFor","placeholder","required","onChange","step","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e897b27.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <h2 style={{textAlign:'center',textTransform:'uppercase'}}>\n          Expense Tracker  \n        </h2>\n    );\n};\n\nexport default Header;","export default (state,action)=>{\n    switch (action.type) {\n        case 'UPDATE_VALUES':\n            return{\n                ...state,\n                ...action.payload\n            }\n        case 'REMOVE_TRANSACTION':\n            return{\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction.id!==action.payload)\n            }\n        case 'ADD_TRANSACTION':\n            return { ...state,\n                transactions: [...state.transactions,action.payload]\n            }\n        default:\n            return state;\n    }\n}","import React,{ createContext, useReducer, useEffect } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport { UpdateValues, RemoveTransaction, AddTransaction } from \"./actions\";\n\nconst INITIAL_STATE = {\n    transactions: [\n        // { id: 1, text: \"Flower\", amount: -20 },\n        // { id: 2, text: \"Salary\", amount: 300 },\n        // { id: 3, text: \"Book\", amount: -10 },\n        // { id: 4, text: \"Camera\", amount: 150 },\n    ],\n    balance:0,\n    income:0,\n    expense:0,\n    removeTransaction:()=>{},\n    addTransaction:()=>{}\n};\n\nexport const GlobalContext = createContext(INITIAL_STATE);\n\nconst GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, INITIAL_STATE);\n    const {transactions, balance,income,expense}= state;\n    const removeTransaction=(id)=> dispatch(RemoveTransaction(id));\n    const addTransaction=(transaction)=> dispatch(AddTransaction(transaction));\n\n    useEffect(()=>{\n        const newBalance=transactions.reduce((total,transaction)=> total+=transaction.amount,0).toFixed(2);\n        const newExpense=transactions\n            .filter(transaction=>transaction.amount<0).reduce((total,transaction)=>total+=transaction.amount,0);\n        const newIncome=transactions\n            .filter(transaction=>transaction.amount>0).reduce((total,transaction)=>total+=transaction.amount,0);\n\n        dispatch(UpdateValues({balance:+newBalance,expense:+newExpense,income:+newIncome}));\n    },[transactions]);\n\n    return (\n        <GlobalContext.Provider value={{ transactions,balance,income,expense,removeTransaction,addTransaction }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport default GlobalProvider;\n","export const UpdateValues=(values)=>({\n    type:'UPDATE_VALUES',\n    payload:values\n});\n\nexport const RemoveTransaction=(id)=>({\n    type: 'REMOVE_TRANSACTION',\n    payload: id\n});\n\nexport const AddTransaction=(transaction)=>({\n    type: 'ADD_TRANSACTION',\n    payload: transaction\n});","import React, { useContext } from 'react';\nimport { GlobalContext } from '../contexts/GlobalContext';\n\nconst Balance = () => {\n    const {balance}= useContext(GlobalContext);\n    const sign= balance===0?'':balance>0?'+':'-';\n    return (\n        <>\n            <h4 style={{textAlign:'center'}}>Your Balance</h4>\n            <h1 style={{textAlign:'center'}} className={balance<0?\"minus\":\"plus\"}>{sign}<span>&#8377;</span>{Math.abs(balance)}</h1>\n        </>\n    );\n};\n\nexport default Balance;","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\n\nconst IncomeExpenses = () => {\n    const {expense,income}= useContext(GlobalContext);\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n                <h4>&#8593;&nbsp;Income</h4>\n                <p className=\"money plus\">\n                    <span>&#8377;</span>\n                    {income}\n                </p>\n            </div>\n            <div>\n                <h4>&#8595;&nbsp;Expense</h4>\n                <p className=\"money minus\">\n                    <span>&#8377;</span>\n                    {Math.abs(expense)}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default IncomeExpenses;\n","import React, { useContext } from 'react';\nimport { GlobalContext } from '../contexts/GlobalContext';\n\nconst Transaction = ({transaction:{amount,text,id}}) => {\n    const sign= amount<0?'-':'+';\n    const {removeTransaction}= useContext(GlobalContext);\n    return (\n        <>\n            <li className={amount<0?\"minus\":\"plus\"}>\n                {text} <span>{sign}<span>&#8377;</span>{Math.abs(amount)}</span>\n                <button className=\"delete-btn\" onClick={()=>removeTransaction(id)}>x</button>\n            </li>\n        </>\n    );\n};\n\nexport default Transaction;","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport Transaction from \"./Transaction\";\n\nconst TransactionsList = () => {\n\n    const {transactions}= useContext(GlobalContext);\n    return (\n        <>\n            <h3>History</h3>\n            <ul className=\"list\">\n                \n                {\n                    transactions.map(transaction=>(\n                        <Transaction key={transaction.id} transaction={transaction} />\n                    ))\n                }\n            </ul>\n        </>\n    );\n};\n\nexport default TransactionsList;\n","import React, { useState, useContext } from 'react';\nimport { GlobalContext } from '../contexts/GlobalContext';\n\nconst AddTransaction = () => {\n\n    const [inputs,setInputs]= useState({amount:0,text:''});\n\n    const handleChange=(e)=>{\n        const {name,value}=e.target;\n        setInputs({...inputs,[name]:value});\n    }\n    const {addTransaction}= useContext(GlobalContext);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputs.text==='' || inputs.amount===0)\n            return;\n        const newTransaction = {\n            id: Math.round(new Date().valueOf() * Math.random()) + \"\",\n            amount: parseFloat(inputs.amount),\n            text: inputs.text\n        };\n        addTransaction(newTransaction);\n        setInputs({ amount: 0, text: \"\" });\n    };\n\n    return (\n        <>\n            <h3>Add new transaction</h3>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"text\">Text</label>\n                    <input type=\"text\" placeholder=\"Enter text...\" required name=\"text\" value={inputs.text} onChange={handleChange} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"amount\">\n                        Amount <br />\n                        (negative - expense, positive - income)\n                    </label>\n                    <input\n                        type=\"number\"\n                        placeholder=\"Enter amount...\"\n                        name=\"amount\"\n                        value={inputs.amount}\n                        onChange={handleChange}\n                        step=\"100\"\n                    />\n                </div>\n                <button className=\"btn\" >Add transaction</button>\n            </form>\n        </>\n    );\n};\n\nexport default AddTransaction;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\nimport Balance from \"./components/Balance\";\nimport IncomeExpenses from \"./components/IncomeExpenses\";\nimport TransactionsList from \"./components/TransactionsList\";\nimport AddTransaction from \"./components/AddTransaction\";\nimport GlobalProvider from \"./contexts/GlobalContext\";\nconst App = () => {\n    return (\n        <GlobalProvider>\n            <Header />\n            <div className=\"container\">\n                <Balance />\n                <IncomeExpenses />\n                <TransactionsList />\n                <AddTransaction />\n            </div>\n        </GlobalProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}